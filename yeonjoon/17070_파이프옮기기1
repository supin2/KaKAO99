#include <iostream>

using namespace std;

int N;
int** wall;
int**** cache;

int sol(int a1, int b1, int a2, int b2){

    if(a2 > N || b2 > N)
        return 0;
    
    if((a1 == a2 || b1 == b2) && wall[a1][b1] + wall[a2][b2] != 0)
        return 0;
    if((a1 != a2 && b1 != b2) && wall[a1][b1] + wall[a1][b2] + wall[a2][b1] + wall[a2][b2] != 0)
        return 0;
    
    if(a2 == N && b2 == N)
        return 1;
    
    if(cache[a1][b1][a2][b2] != -1)
        return cache[a1][b1][a2][b2]; //cached value
    

    if( a1 == a2 ) //가로
        cache[a1][b1][a2][b2] = sol(a1, b1+1, a2, b2+1) + sol(a1, b1+1, a2+1, b2+1);
    else if ( b1 == b2 ) // 세로
        cache[a1][b1][a2][b2] = sol(a1+1, b1, a2+1, b2) + sol(a1+1, b1, a2+1, b2+1);
    else // 대각선
        cache[a1][b1][a2][b2] = sol(a1+1, b1+1, a2, b2+1) + sol(a1+1, b1+1, a2+1, b2) 
                                + sol(a1+1, b1+1, a2+1, b2+1);
    
    return cache[a1][b1][a2][b2];
}

int main()
{
    cin >> N ;
    
    wall = new int*[N+1];
    for(int i = 1; i <= N; i++){
        wall[i] = new int[N+1];
    }
    for(int i = 1 ; i <= N ; i ++ ){
        for( int j = 1; j <= N; j++){
            cin >> wall[i][j];
        }
    }
    cache = new int***[N+1];
    for(int i = 1; i <= N; i++){
        cache[i] = new int**[N+1];
        for(int j = 1; j <= N; j++){
            cache[i][j] = new int*[N+1];
            for(int k = 1; k<= N; k++){
                cache[i][j][k] = new int[N+1];
                fill_n(cache[i][j][k], N+1, -1);
            }
        }
    }
    
    cout << sol(1, 1, 1, 2) << endl;
    
    for(int i = 1; i <= N; i++){
        delete[] wall[i];
    }
    delete[] wall;
    
    for(int i = 1; i <= N; i++){
        for(int j = 1; j <= N; j++){
            for(int k = 1; k<= N; k++){
                delete[] cache[i][j][k];
            }
            delete[] cache[i][j];
        }
        delete[] cache[i];
    }
    delete[] cache;
    
} 
